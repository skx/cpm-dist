
DX-Forth Extension Wordset Glossary                    97-12-28
-----------------------------------

The DX-Forth Extension Wordset is provided in addition to the
FORTH-83 Standard words.


Attributes:

A    Words defined in the draft proposed Forth ANSI document
     X3J14 dpANS-6 - June 30, 1993.

B    Disk access words that require a valid file buffer for
     proper operation.

C    Words that depend on the custom installation of DX-Forth or
     stand-alone applications for proper operation.

F    Words defined in the Fig-Forth model.

I    Words that have the immediate flag set.

S    Words that reside in the System dictionary.


Stack notation:

Note: The following naming conventions for addresses are used to
maintain compatability with the ANS FORTH document.  As DX-Forth
does not currently execute on architectures requiring address
alignment, all address types may be used interchangeably.

number    type                          cells      range
-----     ----                          -----      -----
a-addr    aligned address               1         0..65535
c-addr    character-aligned address     1         0..65535
f-addr    float-aligned address         1         0..65535
p-addr    cpu port address              1         0..255

true      boolean true -1               1         -1
false     boolean false 0               1         0
flag      boolean true or false         1         -1 or 0
ior       input/output result           1         0..255

n         signed number                 1         -32768..32767
+n        positive number               1         0..32767
u         unsigned number               1         0..65535
x         unspecified number            1         -32768..65535
d         signed double number          1         -2147483648..
                                                    2147483647
+d        positive double number        2         0..2147483647
ud        unsigned double number        2         0..4294697295
xd        unspecified double number     2         -2147483648..
                                                    4294697295
r         real number                   2         +-5E-39..1E38
c         character or byte             1         0..255

ccc       any arbitrary blank-delimited character string parsed
          from the input stream


1. Disk File Interface
----------------------

#BUFFERS  ( -- u )

     Return the maximum number of file buffers available.  A
     file buffer is required for each opened file that makes use
     of any of the 'buffered' disk functions.  Each file buffer
     occupies 1024 bytes and the default number of buffers is 2.
     If an application requires more (or less) buffers, this may
     be achieved as follows:

          5  ' #BUFFERS >BODY  !  COLD

     In this example the maximum number of file buffers is
     changed to 5.  See FILE.

 +FILENAME  ( c-addr1 u1 c-addr2 u2 -- c-addr3 u3 )

     Conditionally append the file extension c-addr2 u2 to the
     filename string c-addr1 u1 to produce c-addr3 u3.  If addr1
     u1 does not contain an extension (i.e. the '.' character is
     not present) trailing blanks are removed and c-addr2 u2 is
     appended.

     Note: The returned string resides in a transient region and
     may be overwritten by subsequent operations.

 -FILENAME  ( c-addr u1 -- c-addr u2 )

     Delete any extension from the filename string c-addr u1.
     The resulting string is c-addr u2.

 CF  ( -- a-addr )

     A variable containing the current file-handle descriptor
     block address.  All disk operations involving file-handles
     use CF to determine the current file.  See the entry for
     FILE in DISK.MAC for details of the FD block structure.

 CLOSE-FILE  ( -- ior )

     If open, close the disk file associated with the current
     file-handle.  If the file could not be closed, ior is non-
     zero.  See FLUSH-FILE.

     Note: Not ANS compatible.

 CREATE-FILE  ( c-addr u -- ior )

     Using the current file-handle, create and open a disk file
     specified by the filename c-addr u.  If an existing file
     with the same name already exists, it will be erased.  The
     file-pointer is set to the start of the file.  If the file
     could not be created, ior is non-zero.  Not ANS compatible.

 DELETE-FILE  ( c-addr u -- ior )                      A

     Delete the disk file specified by the string c-addr u.  If
     the file could not be deleted, ior is non-zero.

     Note: DELETE-FILE must not be performed on an open file.

 FILE  ( u -- ) compilation
       ( -- )  run-time

     A defining word used in the form:

          u FILE ccc

     Create a file-handle with the name ccc and assign file
     buffer u for its use.  When ccc is subsequently executed, it
     becomes the current file-handle, allowing disk operations to
     be performed on it.

     A valid file buffer has a number in the range 1 to #BUFFERS.
     Where operation on a file-handle does not involve the use of
     'buffered' file functions, u should be set to 0.

     Use of the same file buffer for several file-handles is
     permitted provided that ONLY ONE such file-handle is open at
     any time.

     See CF.

 FILE-SIZE  ( -- ud )

     Return the number of bytes in the file associated with
     current file-handle.  Under CP/M this number will always be
     a multiple of 128.

     Note: FILE-SIZE returns the length of the file at the time
     it was opened.  Not ANS compatible.

 FILENAME  ( -- c-addr u )

     Return a string containing the name of the disk file
     associated with the current file-handle.  The drive/user
     prefix may be discarded using

          FILENAME  [CHAR] : SCAN  1 /STRING

     Note: The returned string resides in a transient region and
     may be overwritten by subsequent operations.

 FLUSH-FILE  ( -- ior )                                B

     Flush the contents of the output file buffer to the disk
     file associated with the current file-handle.  If an error
     occured, ior is non-zero.  FLUSH-FILE is used typically
     before CLOSE-FILE or REPOSITION-FILE.

     Note: Not ANS compatible.

 OPEN-FILE  ( c-addr u -- ior )

     Using the current file-handle, open the disk file specified
     by the filename c-addr u.  The file-pointer is positioned to
     the start of the file.  If the file could not be found, ior
     is non-zero.

     Note: Not ANS compatible.

 PARSE-FILENAME  ( c-addr1 u1 a-addr2 -- u2 )

     Parse the filename string specified by c-addr1 u1 in the
     form

          [d[u]:]filename[.typ]

     into the 36 byte File Control Block at a-addr2.  Leading
     spaces are skipped.  The filename may optionally contain a
     valid drive letter d (A-P) and user number u (0-15 for CP/M,
     0-31 for Z-System).  If a drive/user is not specified, the
     current drive/user will be assumed.  The following
     characters are treated as delimiters -

     space tab . , : ; < = > _ control characters

     The parsed user number is neither acted upon nor stored in
     the FCB but returned to the stack as u2.

 READ-CHAR  ( -- c ior )                               B

     Read one character (byte) from the disk file associated with
     the current file-handle.  If ior is zero, the character read
     is valid.  If end of file was reached before a character was
     read or an error occured, ior is non-zero and c is
     undefined.

     Note: Unlike READ-LINE, READ-CHAR will not stop if a CP/M
     end-of-text character (1A hex) is encountered.  Thus
     READ-CHAR may be used to retrieve all bytes from a file.

 READ-FILE  ( a-addr u1 -- u2 ior )                    B

     Read u1 bytes from the disk file associated with the current
     file-handle into memory starting at a-addr.  If ior is zero,
     u2 is the number of characters received.  If end of file is
     reached before any characters are read or an error occured,
     ior is non-zero.

     Note: Not ANS compatible.

 READ-LINE  ( c-addr u1 -- u2 ior )                    B

     Read a line of text from the disk file associated with the
     current file-handle into memory starting at address c-addr.
     At most, u1 characters (255 maximum) are read.  If ior is
     zero, u2 is the number characters received not including the
     line terminator.  If u2 = u1 then a line terminator was not
     yet received.  If a CP/M end-of-text character (1A hex) is
     read or the end of the file is reached before any valid
     characters are read or an error occured, ior is non-zero.

     Note: Not ANS compatible.

 READ-RECORD  ( a-addr u1 -- u2 ior )

     Read u1 128-byte CP/M records from the disk file associated
     with the current file-handle to memory a-addr.  Return u2
     records actually read and ior is zero.  If end of file was
     reached before any records were read or an error occured,
     ior is non-zero.

 REPOSITION-FILE  ( ud -- ior )                        B

     Reposition the file-pointer of the disk file associated with
     the current file-handle to position ud.  If the file is
     positioned outside the file boundaries or an error occured,
     ior is non-zero.  If ud = 0 the file-pointer is positioned
     at the start of the file.  See FLUSH-FILE.

     Note: Not ANS compatible.

 RENAME-FILE  ( c-addr1 u1 c-addr2 u2 -- ior )         A

     Rename the disk file specified by c-addr1 u1 to the new name
     c-addr2 u2.  If the file cannot be found or the new name
     already exists then ior is non-zero.  Any drive/user prefix
     attached to the new name is ignored and is assumed to be the
     same as the old name.

     Note: RENAME-FILE must not be performed on an open file.

 RESET-DISKS  ( -- )

     Reset all disks to read/write status.  The currently logged
     drive and user number are unchanged.  RESET-DISKS is used
     after a disk change has occured.

 SEEK-RECORD  ( u -- )

     Reposition the file-pointer of the disk file associated with
     the current file-handle to CP/M record u.  If u = 0 the
     file-pointer is positioned at the start of the file.

 WRITE-CHAR  ( c -- ior )                              B

     Write one character (byte) to the disk file associated with
     the current file-handle.  If the disk was full or an error
     occured, ior is non-zero.

 WRITE-FILE  ( a-addr u -- ior )                       B

     Write u bytes from memory starting at a-addr to the disk
     file associated with the current file-handle.  If the disk
     was full or an error occured, ior is non-zero.

     Note: Not ANS compatible.

 WRITE-LINE  ( c-addr u -- ior )                       B

     Write a line of text c-addr u (255 maximum) followed by the
     CP/M line terminator (0D 0A hex) to the disk file associated
     with the current file-handle.  If the disk was full or an
     error occured, ior is non-zero.

     Note: Not ANS compatible.

 WRITE-RECORD  ( a-addr u -- ior )

     Write u 128-byte CP/M records from memory a-addr to the disk
     file associated with the current file-handle.  If the disk
     is full or an error occured, ior is non-zero.


2. Screen Files
---------------
In DX-Forth screen or block numbers are valid only in the range 0
to 32766.

 #SCREENS  ( -- +n )                                   S

     Return the number of screens/blocks in the screenfile.

 CLOSE  ( -- )                                         S

     Close the screenfile.  No errors are reported with this
     function.

 NEWBLOCKS  ( +n -- )                                  S

     Extend the screenfile by u blocks.

 USING  filename[.SCR]                                 S

     Open or create the specified disk file as the screenfile.


3. Utility
----------

 DELETE  filename                                      S

     Erase the specified file from disk.  DELETE must not be
     performed on an open file.

 DIR  [[du:][filename]]                                S

     List the current disk directory.  Optionally specify a
     drive/user/filename.  Wildcards characters may be used.

 INDEX  ( +n1 +n2 -- )                                 F S

     List line 0 of screens +n1 thru +n2 from the screenfile.
     Line 0 typically contains a comment indicating the contents
     of the screen.

 MAP  ( -- )                                           S

     Display a map of the current system information - dictionary
     size, vocabularies, number of file buffers, logged drive,
     and screenfile if open.

 RENAME  oldfilename newfilename                       S

     Rename the specified disk file with a new name.  RENAME must
     not be performed on an open file.

 SAVE  filename[.COM]                                  S

     Save the current forth system image to disk including any
     new definitions created.  See TURNKEY.

 SHOW  ( +n1 +n2 -- )                                  S

     List screens +n1 through +n2 from the screenfile to the
     printer, formatted 3 screens to the page.  A form-feed
     character (0C hex) is output at the end of each page.

 TURNKEY  ccc  filename[.COM]                          S

     Save a turnkey application to disk using the specified
     filename.  When the application is subsequently run,
     execution begins with the forth word ccc.

     Note: TURNKEY cannot be used to generate a new version of
     Forth as the System dictionary and word headers are
     discarded.  See SAVE.

 WORDS  [ccc]                                         S

     Display the names of forth words in the context vocabulary
     starting with the most recent.  Immediate words are flagged
     with a '#' character preceding the name.  System words are
     flagged with a '|' character.  If a pattern ccc is
     specified, only words whose names begin with ccc will be
     displayed.  Fig-forth equivalent is VLIST.


4. CP/M Interface
-----------------

 BDOS  ( u1 u2 -- u3 )

     Perform CP/M BDOS call u2.  u1 is the value passed to the DE
     register.  Return the contents of the A register as u3.

 BDOSHL  ( u1 u2 -- u3 )

     Perform CP/M BDOS call u2.  u1 is the value passed to the DE
     register.  Return the contents of the HL register as u3.

 BIOS  ( u1 u2 -- u3 )

     Perform CP/M BIOS call u2.  u1 is the value passed to the BC
     register.  Return the contents of the A register as u3.

     Note: CP/M 3 compatible.

 BIOSHL  ( u1 u2 u3 -- u4 )

     Perform CP/M BIOS call u3.  u1 and u2 are the values passed
     to the DE and BC registers respectively.  Return the
     contents of the HL register as u4.

     Note: CP/M 3 compatible.

 PC@  ( p-addr -- u )

     Perform the 8080 IN instruction on port address p-addr and
     return the value u.  The upper 8 bits of u is set to zero.
     Fig-Forth equivalent is P@.

 PC!  ( u p-addr -- )

     Perform the 8080 OUT instruction sending the lower 8 bits of
     u to port address p-addr.  Fig-Forth equivalent is P!

 ZENV  ( -- a-addr | false )

     Return the Z-System external Environment Descriptor address.
     If Z-System is not present return false.


5. Input/Output
---------------

 (D.)  ( d -- c-addr u )

     Convert the signed double number d to a string c-addr u.
     Primitive for D.

     Note: The returned string resides in a transient region and
     may be overwritten by subsequent operations.

 (EMIT)  ( -- a-addr )

     A user variable containing the execution token for EMIT
     allowing EMIT to be revectored.  See CONSOLE PRINTER.

 (KEY)  ( -- a-addr )

     A user variable containing the execution token for KEY
     allowing KEY to be revectored.  See CONSOLE.

 CONSOLE  ( -- )

     Redirect KEY and EMIT to the console.

 KEY?  ( -- flag )                                     A

     Return true if a console key has been pressed.  KEY is
     subsequently used to retrieve the character.  Fig-Forth
     equivalent is ?TERMINAL.

 PRINTER  ( -- )

     Redirect EMIT to the printer.

 OUT  ( -- a-addr )                                    F

     A user variable which contains the number of characters
     output by EMIT or TYPE since the last CR.


6. Arithmetic
-------------

 FM/MOD  ( d n1 -- n2 n3 )                             A

     Divide double number d by single n1, giving the floored
     quotient n3 and the remainder n2.

 LSHIFT  ( x1 u -- x2 )                                A

     Perform a logical left shift of u bit-places on x1 giving
     x2.  Put zero into the least significant bits vacated by the
     shift.

 M*  ( n1 n2 -- d )                                    A

     Multiply n1 by n2 giving the double result d.

 M*/  ( d1 n1 +n2 -- d2 )                              A

     Multiply double number d1 by single n1 producing the triple
     length intermediate result t.  Divide t by +n2 giving the
     double quotient d2.

 M+  ( d1 n -- d2 )                                    A

     Add single length number n to double d1, giving the sum d2.

 RSHIFT  ( x1 u -- x2 )                                A

     Perform a logical right shift of u bit-places on x1 giving
     x2.  Put zero into the most significant bits vacated by the
     shift.


7. Conversion
-------------

 NUMBER?  ( c-addr u -- d true | false )

     Attempt to convert the string c-addr u to a double number
     according to the current base.  If conversion is successful,
     return the double number d and a true flag otherwise return
     false.

     Note: A zero length string or a string with leading blanks
     will return the double number 0 and true.

 UPCASE  ( c1 -- c2 )

     Convert the character c1 to its uppercase equivalent c2.

 UPPER  ( c-addr u -- )

     Convert the character string c-addr u to uppercase.


8. Strings
----------

 /STRING  ( c-addr1 u1 n -- c-addr2 u2 )               A

     Truncate the string c-addr1 u1 by n characters.  The
     resulting string c-addr2 u2 begins at c-addr1+n and has a
     length u1-n.  n may be negative.

 COMPARE  ( c-addr1 u1 c-addr2 u2 -- -1 | 0 | 1 )      A

     Compare string c-addr1 u1 with string c-addr2 u2.  Return 0
     if match, -1 if c-addr1 u1 is less than c-addr2 u2 or 1 if
     greater.

 MOVE  ( a-addr1 a-addr2 u -- )                        A

     Move u bytes from a-addr1 to a-addr2 without overlap.

 PLACE  ( c-addr1 u a-addr2 -- )

     Convert the string c-addr1 u to a counted string (255
     characters maximum) placed at a-addr2.  c-addr1 and a-addr2
     may overlap.

 S"  ccc                                               A I S
     ( -- c-addr u ) run-time

     Parse a string from the input stream delimited by '"'.  When
     compiling, store the string (255 characters maximum) in the
     dictionary.  At runtime, the string address and count is
     left on the stack.

     When interpreting, place the parsed string (80 characters
     maximum) in a temporary buffer and return the string address
     and count on the stack.

 SCAN  ( c-addr1 u1 c -- c-addr2 u2 )

     Scan the string c-addr1 u1 for the character c.  Leave match
     address c-addr2 and length remaining u2.

 SEARCH  ( c-addr1 u1 c-addr2 u2 --                    A
           c-addr3 u3 -1 | c-addr1 u1 0 )

     Search string c-addr1 u1 for the occurence of string c-addr2
     u2.  If found, return -1 and the match address c-addr3 with
     u3 characters remaining.

 SKIP  ( c-addr1 u1 c -- c-addr2 u2 )

     Skip leading occurences of the character c in the string
     c-addr1 u1.  Leave address past match c-addr2 and length
     remaining u2.

 SLITERAL  ( c-addr1 u -- ) compilation                A I S
           ( -- c-addr2 u ) run-time

     Compile the string c-addr u (maximum 255 characters) into
     the dictionary.  When later executed c-addr2 u is left on
     the stack.


9. Dictionary
-------------

 APPLICATION  ( -- )                                   S

     Place subsequent definitions into the Application
     dictionary.  The application dictionary holds words that may
     be executed by turnkey programs.  See SYSTEM.

 EMPTY  ( -- )                                         S

     Delete all definitions created since the last execution of
     COLD or FREEZE.

 FREEZE  ( -- )                                        S

     Make any new definitions permanent.  Such definitions will
     not be able to be erased using FORGET.

 SYSTEM  ( -- )                                        S

     Place subsequent definitions into the System dictionary.
     The System dictionary holds word headers, compiler and
     support functions that are not necessary for the execution
     of turnkey applications.  See APPLICATION.


10. Facility
------------

 AT-XY  ( u1 u2 -- )                                   A C

     Position the screen cursor at column u1 row u2.

 CLEAR-LINE  ( -- )                                    C

     Delete all characters from the current cursor position to
     the end of the line.  The cursor position remains unchanged.

 DELETE-LINE  ( -- )                                   C

     Delete the line at the current cursor position.  All
     subsequent lines are moved up one position.  An empty line
     appears at the bottom of the screen.

 EXIT-VIDEO  ( -- )                                    C

     Send video terminal reset sequence.

 HIGHLIGHT  ( -- )                                     C

     Begin standout video mode (usually reverse or bright).

 INIT-VIDEO  ( -- )                                    C

     Send video terminal initialisation sequence.

 INSERT-LINE  ( -- )                                   C

     Insert an empty line at the current cursor position.  All
     subsequent lines are moved down one position.  The line on
     the bottom of the screen is lost.

 MS  ( u -- )                                          A C

     Enter a delay loop, waiting until u milliseconds have
     elapsed.

 NORMAL  ( -- )                                        C

     End standout video mode.

 PAGE  ( -- )                                          A C

     If the printer is selected, output a formfeed character (0C
     hex) otherwise clear the screen and place the cursor at the
     upper left corner.  See CONSOLE PRINTER.


11. Miscellaneous
-----------------

 BYE  ( -- )                                           A F

     Return control to the CP/M operating system.

 CASE  ( -- )                                          A I S

     Mark the start of a CASE construct.  Used in the form:

          CASE  ( x1 -- )
            x2  OF ... ENDOF
            x3  OF ... ENDOF
            x1  ...
            x1  ENDCASE

 CHAR  ( -- c )                                        A S

     Parse the next word in the input stream and return the ASCII
     value of the first character.

 COLD  ( -- )                                          F

     Restart the forth system or application.

 ENDCASE  ( x -- )                                     A I S

     Mark the end of a CASE construct.  Discard x.  See CASE OF
     ENDOF.

 ENDOF  ( -- )                                         A I S

     Mark the end of an OF ENDOF pair.  See CASE OF ENDCASE.

 EVALUATE  ( c-addr u -- )                             A S

     Save the current input source specification.  Make the
     string described by c-addr u both the input source and input
     buffer, set >IN to zero, and interpret.  When the parse area
     is empty, restore the prior input source specification.

 OF  ( x1 x2 -- )                                      A I S

     Mark the start of an OF ENDOF pair.  If x1 = x2, discard
     both values and perform the sequence between OF and ENDOF.
     Execution continues after ENDCASE.  If x1 <> x2, discard x2
     and continue after the corresponding ENDOF.  See CASE ENDOF
     ENDCASE.

 PAUSE  ( -- )

     Provides support for multitasking applications.  When the
     multitasker is loaded and enabled, PAUSE passes control to
     the next task.  Refer to the multitasking documentation for
     further details.

     Note: PAUSE is automatically executed by KEY? KEY EMIT and
     during disk sector read/write operations.

 R0  ( -- a-addr )                                     F

     A user variable which contains the address of the top of the
     return stack.

 RP!  ( a-addr -- )

     Set the return stack pointer to a-addr.

 RP@  ( -- a-addr )                                    F

     Return the address of the current return stack pointer.

 S0  ( -- a-addr )                                     F

     A user variable which contains the address of the top of the
     parameter stack.

 SP!  ( a-addr -- )

     Set the parameter stack pointer to a-addr.

 SP@  ( -- a-addr )                                    F

     Return the address of the current parameter stack pointer.

 UNUSED  ( -- u )                                      A

     Return the number of free memory bytes available according
     to whether APPLICATION or SYSTEM is selected.  In the
     APPLICATION space, allowance should be made for the
     parameter stack size.

 WITHIN  ( n1 n2 n3 -- flag )                          A

     Return true if n3 lies within the range n1 to n2-1,
     otherwise return false.

 Y/N  ( -- flag )

     Display '(y/n) N' and wait for a single console key.  Return
     true if the 'Y' or 'y' key was pressed or false otherwise.

 [CHAR]  ( -- c )                                      A I S

     Parse the next word in the input stream and compile the
     ASCII value of the first character as a literal.

 [IF]  [ELSE]  [THEN]                                  A I S

     These are the equivalents of IF ELSE THEN but may be used
     outside a definition.

 \  ( -- )                                             A I S

     Skip the rest of the line and resume interpretation at the
     beginning of the next line.


13. Floating Point
------------------
In DX-Forth a real number occupies two cells (4 bytes) with a
maximum precision of 7 digits and a dynamic range of 5E-39 to
1E38.

The forth interpreter recognises a number as floating point if it
contains an exponent identifier 'E' e.g.  1.0E  3.141952E  1e-12

Note: DX-Forth uses the parameter stack for all floating point
operations.  A separate floating point stack is not used.


 (F.)  ( r -- c-addr u )

     Convert real number r to string c-addr u in floating point
     format.  Primitive for F.

     Note: The returned string resides in a transient region and
     may be overwritten by subsequent operations.

 (FS.)  ( r -- c-addr u )

     Convert real number r to string c-addr u in scientific
     format.  Primitive for FS.

     Note: The returned string resides in a transient region and
     may be overwritten by subsequent operations.

 >FLOAT  ( c-addr u -- r true | false )                A

     Convert the string c-addr u to a real number.  If
     successful, return the real number r and true or false
     otherwise.

     Note: A zero length string or a string with leading blanks
     will return the real number 0.0E and true.

 D>F  ( d -- r )                                       A

     Convert the double number to its real number equivalent.

 F!  ( r f-addr --  )                                  A

     Store r at f-addr.

 F*  ( r1 r2 -- r3 )                                   A

     Multiply r1 by r2, giving the product r3.

 F**  ( r1 r2 -- r3 )                                  A

     Raise r1 to the power r2.

 F+  ( r1 r2 -- r3 )                                   A

     Add r1 to r2, giving the sum r3.

 F-  ( r1 r2 -- r3 )                                   A

     Subtract r2 from r1, giving the difference r3.

 F.  ( r -- )                                          A

     Display r in floating point format followed by a trailing
     space.  If r is outside the range 1E-1 to 9.999999E6 display
     the number in scientific format.

 F.R  ( r u -- )

     Display r in floating point format right justified in a
     field width u.  If r is outside the range 1E-1 to 9.999999E6
     display the number in scientific format.

 F/  ( r1 r2 -- r3 )                                   A

     Divide r1 by r2, giving the quotient r3.

 F0<  ( r -- flag )                                    A

     Return true if r is less than zero, or false otherwise.

 F0=  ( r -- flag )                                    A

     Return true if r is equal to zero, or false otherwise.

 F<  ( r1 r2 -- flag )                                 A

     Return true if r1 is less than r2, or false otherwise.

 F>D  ( r -- d )                                       A

     Convert the integer part of r to its double number
     equivalent.

 F@  ( f-addr -- r )                                   A

     Return the value of the real number stored at f-addr.

 FABS  ( r1 -- r2 )                                    A

     Return the absolute value of r1.

 FATAN  ( r1 -- r2 )                                   A

     r2 is the radian angle whose tangent is r1.

 FCONSTANT  ( r -- ) compilation                       A
            ( -- r ) run-time

     Define a floating point constant having the value r.

 FCOS  ( r1 -- r2 )                                    A

     r2 is the cosine of the radian angle r1.

 FDROP  ( r --  )                                      A

     Remove r from the stack.

 FDUP  ( r -- r r )                                    A

     Duplicate r.

 FEXP  ( r1 -- r2 )                                    A

     Raise e to the power r1, giving r2.

 FLITERAL  ( r -- ) compilation                        A
           ( -- r ) run-time

     Compile r into the dictionary.  When later executed r is
     left on the stack.

 FLN  ( r1 -- r2 )                                     A

     r2 is the natural logarithm of r1.

 FLOOR  ( r1 -- r2 )                                   A

     Round r1 to an integral value using the "round toward
     negative infinity" rule, giving r2.

 FMAX  ( r1 r2 -- r3 )                                 A

     r3 is the maximum of r1 and r2.

 FMIN  ( r1 r2 -- r3 )                                 A

     r3 is the minimum of r1 and r2.

 FNEGATE  ( r1 -- r2 )                                 A

     Negate r1, giving r2.

 FOVER  ( r1 r2 -- r1 r2 r1 )                          A

     Place a copy of r1 on top of the stack.

 FRANDOM  ( r1 -- r2 )

     If r1 is a positive non-zero number, return a psuedo-random
     number r2 uniformly distributed in the range 0.0E to (but
     not including) 1.0E.  If r1 is zero, return the last random
     number generated.  If r1 is negative, r1 is used to re-seed
     the random number generator.

 FROT  ( r1 r2 r3 -- r2 r3 r1 )                        A

     Rotate r1 to the top of the stack.

 FROUND  ( r1 -- r2 )                                  A

     Round r1 to an integral value using the "round to nearest"
     rule, giving r2.

 FS.  ( r -- )                                         A

     Display r in scientific format followed by a trailing space.

 FS.R  ( r u -- )

     Display r in scientific format right justified in a field
     width u.

 FSIN  ( r1 -- r2 )                                    A

     r2 is the sine of the radian angle r1.

 FSQRT  ( r1 -- r2 )                                   A

     r2 is the square root of r1.

 FSWAP  ( r1 r2 -- r2 r1 )                             A

     Exchange the top two floating point numbers.

 FVARIABLE  ( -- ) compilation                         A
            ( -- f-addr ) run-time

     Define a floating point variable.

 PRECISION  ( -- u )                                   A

     Return the number of significat digits currently used by F.
     F.R FS. or FS.R

 REPRESENT  ( r c-addr u -- n flag1 flag2 )            A

     Place the character string representation of r at c-addr
     rounded to u digits.  The character string has an implied
     decimal point to the left of the first digit.  n is the
     decimal-base exponent.  flag1 is true if r is negative.
     flag2 is true if r is in the range of the implementation-
     defined range of floating point numbers.  In DX-Forth, flag2
     is always true.

 SET-PRECISION  ( u -- )                               A

     Set the number of significant digits currently used by F.
     F.R FS. and FS.R.  In DX-Forth, the number of significant
     digits is limited to 7.


14. Compiler Security
---------------------
DX-Forth uses the fig-Forth method of compiler security.

 !CSP  ( -- )                                          F

     Save current stack position.  See ?CSP

 ?CSP  ( -- )                                          F

     Issue an error message 'definition incomplete' and abort if
     the current stack pointer does not match the value saved by
     !CSP.

 ?PAIRS  ( u1 u2 -- )                                  F

     Issue an error message 'conditionals not paired' and abort
     if u1 <> u2.

 ?COMP  ( -- )                                         F

     Issue an error message 'compilation only' and abort if not
     compiling.

 ?EXEC  ( -- )                                         F

     Issue an error message 'execution only' and abort if not
     executing.

 ?STACK  ( -- )                                        F

     Issue an error message and abort if stack underflow or out
     of memory.

 SMUDGE  ( -- )                                        F

     Toggle the 'smudge' bit in the header of the last defined
     word.  If the smudge bit is set, the definition will not be
     found during a dictionary search.
