Misc - Information                                      971228esompare: <> 0<>                                       971228es\ Leave true flag if n1 <> n2                                   : <>  ( n1 n2 -- flag ) = NOT ;                                 \ CODE <>  ( n1 n2 -- flag )                                    \  H POP  D POP  L A MOV  E CMP  ' -1 JNZ                       \  H A MOV  D CMP  ' -1 JNZ  ' 0 JMP  END-CODE                                                                                  \ Leave true flag if n <> 0                                     : 0<>  ( n -- flag ) 0= NOT ;                                   \ CODE 0<>  ( n -- flag )                                       \  H POP  L A MOV  H ORA  ' -1 JNZ  ' 0 JMP  END-CODE                                                                                                                                                                                                                                                                                                                                           \ Stack: -ROT NIP TUCK                                  971228es\ Reverse ROT                                                   : -ROT  ( n1 n2 n3 -- n3 n1 n2 )  ROT ROT ;                     \ CODE -ROT  ( n1 n2 n3 -- n3 n1 n2 )                           \  H POP  D POP  XTHL  XCHG  DPUSH JMP  END-CODE                                                                                \ Drop second item on stack                                     : NIP  ( n1 n2 -- n2 )  SWAP DROP ;                             \ CODE NIP  ( n1 n2 -- n2 )                                     \  H POP  D POP  HPUSH JMP  END-CODE                                                                                            \ Copy top item on stack under the second                       : TUCK  ( n1 n2 -- n2 n1 n2 )  SWAP OVER ;                      \ CODE TUCK  ( n1 n2 -- n2 n1 n2 )                              \  H POP  D POP  H PUSH  DPUSH JMP  END-CODE                                                                                    \ Bit: ASHIFT                                           971228es\ Arithmetic bit shift.  Shift n1 by n2 bits - shift right if   \ n2 is positive or shift left if n2 is negative.  The sign of  \ n1 is maintained in the result n3.                                                                                            CODE ASHIFT  ( n1 n2 -- n3 )                                      D POP  H POP                                                    D A MOV  RAL  2 $ JNC                                           E A MOV  CMA  A INR  A E MOV  E INR                           1 $: E DCR  HPUSH JZ                                              H A MOV  RLC  RRC  RAR  A H MOV                                 L A MOV  RAR  A L MOV  1 $ JMP                                2 $: E INR                                                      3 $: E DCR  HPUSH JZ  H DAD  3 $ JMP  END-CODE                                                                                                                                                  \ Bit: ROTATE                                           971228es\ Rotate u1 by n bits - rotate right if n is positive or        \ rotate left if n is negative.                                                                                                 CODE ROTATE  ( u1 n -- u2 )                                       D POP  H POP                                                    D A MOV  RAL  2 $ JNC                                           E A MOV  CMA  A INR  A E MOV  E INR                           1 $: E DCR  HPUSH JZ                                              H A MOV  RAR  L A MOV  RAR  A L MOV                             H A MOV  RAR  A H MOV  1 $ JMP                                2 $: E INR                                                      3 $: E DCR  HPUSH JZ                                              H A MOV  RAL  L A MOV  RAL  A L MOV                             H A MOV  RAL  A H MOV  3 $ JMP  END-CODE                                                                                      \ String: -TEXT                                         971228es\ Compare string c-addr1 to string c-addr2 for u chars (bytes). \ Return n = 0 if equal else the difference between the first   \ unequal characters.                                                                                                           CODE -TEXT  ( c-addr1 u c-addr2 -- n )                            D POP  C L MOV  B H MOV  B POP  XTHL  XCHG                    1 $: C A MOV  B ORA  2 $ JZ  ( end)                               D LDAX  M SUB  2 $ JNZ  ( difference)                           H INX  D INX  B DCX  1 $ JMP                                  2 $: B POP  A L MOV  0 H MVI  HPUSH JP  ( zero or positive)       H DCR  HPUSH JMP  ( negative)  END-CODE                                                                                                                                                                                                                                                                                       \ Exception: CATCH THROW                                971228es\ modified from dpANS example                                                                                                   VARIABLE  HANDLER   \ make a USER variable if multitasking      0 HANDLER !         \ applications should init HANDLER to zero                                                                  \ Execute cfa. Return n if THROW encountered, 0 otherwise.      : CATCH  ( cfa -- n | 0 )                                         SP@ >R  HANDLER @ >R  RP@ HANDLER !  EXECUTE                    R> HANDLER !  R> DROP 0 ;                                                                                                     \ If n is non-zero, return to CATCH                             : THROW  ( n -- )                                                 ?DUP  IF HANDLER @  DUP 0=  IF ( no CATCH ) ABORT  THEN         RP!  R> HANDLER !  R> SWAP >R  SP!  DROP  R>  THEN ;                                                                          \ Vectoring: DEFER IS                                   971228esAPPLICATION                                                     \ Create a defered word                                         : DEFER  ( -- )                                                   CREATE  -2 ALLOT  [ ' PAUSE 1+ @ ] LITERAL ,  ['] ABORT , ;                                                                   : (IS)  ( cfa -- ) R> DUP 2+ >R  @  ! ;                         \ CODE (IS)  ( cfa -- ) B LDAX  A L MOV  B INX  B LDAX  A H MOV \  B INX  D POP  E M MOV  H INX  D M MOV  NEXT JMP  END-CODE                                                                    SYSTEM                                                          \ Initialise defered word                                       : IS  ( cfa -- )                                                  ' >BODY  STATE @ IF COMPILE (IS) , ELSE ! THEN  ; IMMEDIATE   APPLICATION                                                                                                                     \ Input: CPM-EXPECT                                     971228es\ A version of EXPECT that uses BDOS function 10.  The buffer   \ size must be at least u+2 characters.  Ctrl-C typed at the    \ start of the line return causes an immediate exit to CP/M.                                                                    : CPM-EXPECT ( c-addr u -- )                                      OVER C!               \ store max count                         DUP 10 BDOS DROP      \ execute function                        DUP  1+ COUNT >R      \ get actual count received               SWAP R@ CMOVE         \ move string down                        R> SPAN ! ;           \ init SPAN                                                                                                                                                                                                                                                                                                                                                             \ ANS compatibility                                     971228esAPPLICATION                                                     : CHAR+     ( c-addr1 -- c-addr2 ) 1+ ;                         : CHARS     ( n1 -- n2 ) ;                                      : CELL+     ( addr1 -- addr2 ) 2+ ;                             : CELLS     ( n1 -- n2 ) 2* ;                                   : FLOAT+    ( f-addr1 -- f-addr2 ) 4 + ;                        : FLOATS    ( n1 -- n2 ) 4 * ;                                  : ACCEPT    ( c-addr +n1 -- +n2 ) EXPECT SPAN @ ;               : D>S       ( d -- n ) DROP ;                                   : TRUE      ( -- -1 ) -1 ;                                      : FALSE     ( -- 0 ) 0 ;                                        : SM/REM    ( d n -- nRem nQuot ) DUP >R FM/MOD 2DUP 0< AND                 IF SWAP R@ - SWAP 1+ THEN R> DROP ;                 -->                                                                                                                             \ ANS compatibility                                     971228esSYSTEM                                                          : ALIGN     ( -- ) ; IMMEDIATE                                  : ALIGNED   ( addr -- a-addr ) ; IMMEDIATE                      : FALIGN    ( -- ) ; IMMEDIATE                                  : FALIGNED  ( addr -- f-addr ) ; IMMEDIATE                      : POSTPONE                                                        ?COMP BL WORD FIND DUP 0= ABORT" is undefined" 0<               IF COMPILE COMPILE THEN , ; IMMEDIATE                         : SOURCE   ( -- c-addr u ) #TIB 2@ ;                            APPLICATION                                                                                                                                                                                                                                                                                                                                                                                     \ Variable: VALUE TO                                    971228es\ Self-fetching variables                                       APPLICATION                                                     : VALUE  CREATE  ( -- ) 2 ALLOT  DOES>  ( -- n ) @ ;            \ : VALUE  CREATE  ( -- ) 2 ALLOT  ;CODE  ( -- n )              \  H POP  M A MOV  H INX  M H MOV  A L MOV  HPUSH JMP  END-CODE                                                                 : (TO)  ( n -- ) R> DUP 2+ >R  @  ! ;                           \ CODE (TO)  ( n -- ) B LDAX  A L MOV  B INX  B LDAX  A H MOV   \  B INX  D POP  E M MOV  H INX  D M MOV  NEXT JMP  END-CODE                                                                    SYSTEM                                                          : TO  ( n -- )                                                    ' >BODY  STATE @ IF COMPILE (TO) , ELSE ! THEN  ; IMMEDIATE   APPLICATION                                                                                                                     \ >< BOUNDS PERFORM                                     971228es\ Swap high and low order bytes of x1                           CODE ><  ( x1 -- x2 )                                             D POP  D L MOV  E H MOV  HPUSH JMP  END-CODE                                                                                  \ Common setup for DO..LOOP                                     : BOUNDS  ( addr u --  addr+u addr ) OVER + SWAP ;                                                                              \ Equivalent to @ EXECUTE                                       \ execute a def'n whose compilation address is in a variable    CREATE PERFORM  -3 ALLOT  195 C,  ' PAUSE 1+ @ ,                                                                                                                                                                                                                                                                                                                                                \ RANDOM1                                               971228es\ Simple 16 bit psuedo-random number generator                                                                                  VARIABLE SEED                                                                                                                   : RANDOM  ( -- u )                                                SEED @  1509  UM* DROP  41 +  DUP SEED ! ;                                                                                    \ CODE RANDOM  ( -- u )                                         \  SEED LHLD  H D MOV  L E MOV                                  \  H DAD  H DAD  D DAD  H DAD  D DAD  H DAD  D DAD  H DAD       \  D DAD  H DAD  H DAD  H DAD  D DAD  H DAD  H DAD  D DAD       \  41 D LXI  D DAD  SEED SHLD  HPUSH JMP  END-CODE                                                                                                                                                                                                              \ RANDOM2                                               971228es\ Better 16 bit psuedo-random number generator                                                                                  2VARIABLE SEED                                                                                                                  : UD*  ( ud1 ud2 -- ud3 ) 3 PICK  UM* DROP  >R                    SWAP OVER  UM* DROP  >R  UM*  0 R>  D+  0 R>  D+ ;                                                                            : RANDOM  ( -- u )                                                SEED 2@  1103515245. UD*  12345. D+  SWAP OVER  SEED 2! ;                                                                                                                                                                                                                                                                                                                                                                                                     \ SQRT                                                  971228es\ 16 bit fast integer square root (refer FD14/5)                \ Returns the root and remainder, or 0 -1 if n is negative      : SQRT  ( n -- root remainder )                                   DUP 0<  IF  DROP 0 -1  ELSE                                       0 SWAP 16384 ( 2^14 )                                           BEGIN                                                             >R  DUP 2 PICK - R@ -  DUP 0<                                   IF  DROP SWAP 2/                                                ELSE  SWAP DROP SWAP 2/ R@ +  THEN                              SWAP R> 2/ 2/                                                   DUP 0=                                                        UNTIL  DROP                                                   THEN ;                                                                                                                                                                                        \ DSQRT                                                 971228es\ 32 bit fast integer square root (refer FD14/5)                \ Returns the root and remainder, or 0 -1 if d is negative      : DSQRT  ( d -- root remainder )                                  DUP 0<  IF  2DROP 0. -1.  ELSE                                    0. 2SWAP 1073741824. ( 2^30 )                                   BEGIN                                                             2>R  2DUP 5 PICK 5 PICK D- 2R@ D-  DUP 0<                       IF  2DROP 2SWAP D2/                                             ELSE  2SWAP 2DROP 2SWAP D2/ 2R@ D+  THEN                        2SWAP 2R> D2/ D2/                                               2DUP D0=                                                      UNTIL  2DROP                                                  THEN ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        